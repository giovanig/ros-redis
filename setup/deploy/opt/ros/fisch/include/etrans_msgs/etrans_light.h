// Generated by gencpp from file etrans_msgs/etrans_light.msg
// DO NOT EDIT!


#ifndef ETRANS_MSGS_MESSAGE_ETRANS_LIGHT_H
#define ETRANS_MSGS_MESSAGE_ETRANS_LIGHT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace etrans_msgs
{
template <class ContainerAllocator>
struct etrans_light_
{
  typedef etrans_light_<ContainerAllocator> Type;

  etrans_light_()
    : state(0)
    , signal_group(0)
    , time_to_change(0.0)
    , latitude(0.0)
    , longitude(0.0)  {
    }
  etrans_light_(const ContainerAllocator& _alloc)
    : state(0)
    , signal_group(0)
    , time_to_change(0.0)
    , latitude(0.0)
    , longitude(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _state_type;
  _state_type state;

   typedef uint32_t _signal_group_type;
  _signal_group_type signal_group;

   typedef double _time_to_change_type;
  _time_to_change_type time_to_change;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;




  typedef boost::shared_ptr< ::etrans_msgs::etrans_light_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::etrans_msgs::etrans_light_<ContainerAllocator> const> ConstPtr;

}; // struct etrans_light_

typedef ::etrans_msgs::etrans_light_<std::allocator<void> > etrans_light;

typedef boost::shared_ptr< ::etrans_msgs::etrans_light > etrans_lightPtr;
typedef boost::shared_ptr< ::etrans_msgs::etrans_light const> etrans_lightConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::etrans_msgs::etrans_light_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::etrans_msgs::etrans_light_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace etrans_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'etrans_msgs': ['/home/wqkhan/catkin_ws/src/renesas-demo/drivers/third_party/etrans_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::etrans_msgs::etrans_light_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::etrans_msgs::etrans_light_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::etrans_msgs::etrans_light_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::etrans_msgs::etrans_light_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::etrans_msgs::etrans_light_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::etrans_msgs::etrans_light_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::etrans_msgs::etrans_light_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c32da18cf5c5b5fc7fb74eb7e7860ee2";
  }

  static const char* value(const ::etrans_msgs::etrans_light_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc32da18cf5c5b5fcULL;
  static const uint64_t static_value2 = 0x7fb74eb7e7860ee2ULL;
};

template<class ContainerAllocator>
struct DataType< ::etrans_msgs::etrans_light_<ContainerAllocator> >
{
  static const char* value()
  {
    return "etrans_msgs/etrans_light";
  }

  static const char* value(const ::etrans_msgs::etrans_light_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::etrans_msgs::etrans_light_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 state\n\
uint32 signal_group\n\
float64 time_to_change\n\
float64 latitude\n\
float64 longitude\n\
";
  }

  static const char* value(const ::etrans_msgs::etrans_light_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::etrans_msgs::etrans_light_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.signal_group);
      stream.next(m.time_to_change);
      stream.next(m.latitude);
      stream.next(m.longitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct etrans_light_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::etrans_msgs::etrans_light_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::etrans_msgs::etrans_light_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.state);
    s << indent << "signal_group: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.signal_group);
    s << indent << "time_to_change: ";
    Printer<double>::stream(s, indent + "  ", v.time_to_change);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ETRANS_MSGS_MESSAGE_ETRANS_LIGHT_H
