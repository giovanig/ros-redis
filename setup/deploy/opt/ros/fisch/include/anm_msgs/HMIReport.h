// Generated by gencpp from file anm_msgs/HMIReport.msg
// DO NOT EDIT!


#ifndef ANM_MSGS_MESSAGE_HMIREPORT_H
#define ANM_MSGS_MESSAGE_HMIREPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace anm_msgs
{
template <class ContainerAllocator>
struct HMIReport_
{
  typedef HMIReport_<ContainerAllocator> Type;

  HMIReport_()
    : header()
    , request(0)  {
    }
  HMIReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , request(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _request_type;
  _request_type request;


    enum { HMI_REQ_MANUAL = 0u };
     enum { HMI_REQ_STOP_AND_PARK = 1u };
     enum { HMI_REQ_FIND_PARKING = 2u };
     enum { HMI_REQ_DRIVE_ROUTE = 3u };
     enum { HMI_REQ_DRIVE_PLATOONING = 4u };
     enum { HMI_REQ_SIMULATE_FAIL_STACK = 101u };
     enum { HMI_REQ_FORCE_EMERGENCY_NAV = 102u };
     enum { HMI_REQ_FORCE_EMERGENCY_PULLOVER = 103u };
     enum { HMI_REQ_INVALID = 126u };
     enum { HMI_REQ_NONE = 127u };
 

  typedef boost::shared_ptr< ::anm_msgs::HMIReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anm_msgs::HMIReport_<ContainerAllocator> const> ConstPtr;

}; // struct HMIReport_

typedef ::anm_msgs::HMIReport_<std::allocator<void> > HMIReport;

typedef boost::shared_ptr< ::anm_msgs::HMIReport > HMIReportPtr;
typedef boost::shared_ptr< ::anm_msgs::HMIReport const> HMIReportConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anm_msgs::HMIReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anm_msgs::HMIReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace anm_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'anm_msgs': ['/home/waleedqk/catkin_ws/src/renesas-demo/autonomoose/rospackages/autonomoose_core/anm_msgs/msg'], 'dbw_mkz_msgs': ['/home/waleedqk/catkin_ws/deploy/install/opt/ros/fisch/share/dbw_mkz_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::anm_msgs::HMIReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anm_msgs::HMIReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anm_msgs::HMIReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anm_msgs::HMIReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anm_msgs::HMIReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anm_msgs::HMIReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anm_msgs::HMIReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b9053208a0924d8bbe1073b5b6cbebfb";
  }

  static const char* value(const ::anm_msgs::HMIReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb9053208a0924d8bULL;
  static const uint64_t static_value2 = 0xbe1073b5b6cbebfbULL;
};

template<class ContainerAllocator>
struct DataType< ::anm_msgs::HMIReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anm_msgs/HMIReport";
  }

  static const char* value(const ::anm_msgs::HMIReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anm_msgs::HMIReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message indicates the requests from the HMI\n\
\n\
# Defined modes:\n\
uint8 HMI_REQ_MANUAL = 0\n\
uint8 HMI_REQ_STOP_AND_PARK = 1\n\
uint8 HMI_REQ_FIND_PARKING = 2\n\
uint8 HMI_REQ_DRIVE_ROUTE = 3\n\
uint8 HMI_REQ_DRIVE_PLATOONING = 4\n\
uint8 HMI_REQ_SIMULATE_FAIL_STACK = 101\n\
uint8 HMI_REQ_FORCE_EMERGENCY_NAV = 102\n\
uint8 HMI_REQ_FORCE_EMERGENCY_PULLOVER = 103\n\
uint8 HMI_REQ_INVALID = 126\n\
uint8 HMI_REQ_NONE = 127\n\
\n\
# Message definition\n\
Header header\n\
uint8 request\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::anm_msgs::HMIReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anm_msgs::HMIReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.request);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HMIReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anm_msgs::HMIReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anm_msgs::HMIReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "request: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.request);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANM_MSGS_MESSAGE_HMIREPORT_H
