// Generated by gencpp from file anm_msgs/ControlCommands.msg
// DO NOT EDIT!


#ifndef ANM_MSGS_MESSAGE_CONTROLCOMMANDS_H
#define ANM_MSGS_MESSAGE_CONTROLCOMMANDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <dbw_mkz_msgs/Gear.h>
#include <dbw_mkz_msgs/TurnSignal.h>

namespace anm_msgs
{
template <class ContainerAllocator>
struct ControlCommands_
{
  typedef ControlCommands_<ContainerAllocator> Type;

  ControlCommands_()
    : header()
    , steering_pos_cmd(0.0)
    , steering_vel_cmd(0.0)
    , steering_EN(0)
    , throttle_cmd(0.0)
    , throttle_EN(0)
    , brake_cmd(0.0)
    , brake_EN(0)
    , gear_cmd()
    , turn_signal_cmd()  {
    }
  ControlCommands_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , steering_pos_cmd(0.0)
    , steering_vel_cmd(0.0)
    , steering_EN(0)
    , throttle_cmd(0.0)
    , throttle_EN(0)
    , brake_cmd(0.0)
    , brake_EN(0)
    , gear_cmd(_alloc)
    , turn_signal_cmd(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _steering_pos_cmd_type;
  _steering_pos_cmd_type steering_pos_cmd;

   typedef float _steering_vel_cmd_type;
  _steering_vel_cmd_type steering_vel_cmd;

   typedef uint8_t _steering_EN_type;
  _steering_EN_type steering_EN;

   typedef float _throttle_cmd_type;
  _throttle_cmd_type throttle_cmd;

   typedef uint8_t _throttle_EN_type;
  _throttle_EN_type throttle_EN;

   typedef float _brake_cmd_type;
  _brake_cmd_type brake_cmd;

   typedef uint8_t _brake_EN_type;
  _brake_EN_type brake_EN;

   typedef  ::dbw_mkz_msgs::Gear_<ContainerAllocator>  _gear_cmd_type;
  _gear_cmd_type gear_cmd;

   typedef  ::dbw_mkz_msgs::TurnSignal_<ContainerAllocator>  _turn_signal_cmd_type;
  _turn_signal_cmd_type turn_signal_cmd;




  typedef boost::shared_ptr< ::anm_msgs::ControlCommands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anm_msgs::ControlCommands_<ContainerAllocator> const> ConstPtr;

}; // struct ControlCommands_

typedef ::anm_msgs::ControlCommands_<std::allocator<void> > ControlCommands;

typedef boost::shared_ptr< ::anm_msgs::ControlCommands > ControlCommandsPtr;
typedef boost::shared_ptr< ::anm_msgs::ControlCommands const> ControlCommandsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anm_msgs::ControlCommands_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anm_msgs::ControlCommands_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace anm_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'anm_msgs': ['/home/waleedqk/catkin_ws/src/renesas-demo/autonomoose/rospackages/autonomoose_core/anm_msgs/msg'], 'dbw_mkz_msgs': ['/home/waleedqk/catkin_ws/deploy/install/opt/ros/fisch/share/dbw_mkz_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::anm_msgs::ControlCommands_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anm_msgs::ControlCommands_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anm_msgs::ControlCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anm_msgs::ControlCommands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anm_msgs::ControlCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anm_msgs::ControlCommands_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anm_msgs::ControlCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d0e12956f02b3e297a2b3e14ba7b4c6b";
  }

  static const char* value(const ::anm_msgs::ControlCommands_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd0e12956f02b3e29ULL;
  static const uint64_t static_value2 = 0x7a2b3e14ba7b4c6bULL;
};

template<class ContainerAllocator>
struct DataType< ::anm_msgs::ControlCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anm_msgs/ControlCommands";
  }

  static const char* value(const ::anm_msgs::ControlCommands_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anm_msgs::ControlCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message defines all control commands required to control the vehicle\n\
\n\
Header header\n\
\n\
# Steering Wheel\n\
float32 steering_pos_cmd # (rad)\n\
float32 steering_vel_cmd # (rad/s)\n\
uint8 steering_EN\n\
\n\
# Throttle\n\
float32 throttle_cmd # (percent) from 0.0 to 1.0\n\
uint8 throttle_EN\n\
\n\
# Brake\n\
float32 brake_cmd # (Nm) torque from 0.0 to 3450.0\n\
uint8 brake_EN\n\
\n\
# Gear\n\
dbw_mkz_msgs/Gear gear_cmd\n\
\n\
# Turn signal\n\
dbw_mkz_msgs/TurnSignal turn_signal_cmd\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: dbw_mkz_msgs/Gear\n\
uint8 gear\n\
\n\
uint8 NONE=0\n\
uint8 PARK=1\n\
uint8 REVERSE=2\n\
uint8 NEUTRAL=3\n\
uint8 DRIVE=4\n\
uint8 LOW=5\n\
\n\
================================================================================\n\
MSG: dbw_mkz_msgs/TurnSignal\n\
uint8 value\n\
\n\
uint8 NONE=0\n\
uint8 LEFT=1\n\
uint8 RIGHT=2\n\
";
  }

  static const char* value(const ::anm_msgs::ControlCommands_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anm_msgs::ControlCommands_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.steering_pos_cmd);
      stream.next(m.steering_vel_cmd);
      stream.next(m.steering_EN);
      stream.next(m.throttle_cmd);
      stream.next(m.throttle_EN);
      stream.next(m.brake_cmd);
      stream.next(m.brake_EN);
      stream.next(m.gear_cmd);
      stream.next(m.turn_signal_cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlCommands_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anm_msgs::ControlCommands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anm_msgs::ControlCommands_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "steering_pos_cmd: ";
    Printer<float>::stream(s, indent + "  ", v.steering_pos_cmd);
    s << indent << "steering_vel_cmd: ";
    Printer<float>::stream(s, indent + "  ", v.steering_vel_cmd);
    s << indent << "steering_EN: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.steering_EN);
    s << indent << "throttle_cmd: ";
    Printer<float>::stream(s, indent + "  ", v.throttle_cmd);
    s << indent << "throttle_EN: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.throttle_EN);
    s << indent << "brake_cmd: ";
    Printer<float>::stream(s, indent + "  ", v.brake_cmd);
    s << indent << "brake_EN: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake_EN);
    s << indent << "gear_cmd: ";
    s << std::endl;
    Printer< ::dbw_mkz_msgs::Gear_<ContainerAllocator> >::stream(s, indent + "  ", v.gear_cmd);
    s << indent << "turn_signal_cmd: ";
    s << std::endl;
    Printer< ::dbw_mkz_msgs::TurnSignal_<ContainerAllocator> >::stream(s, indent + "  ", v.turn_signal_cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANM_MSGS_MESSAGE_CONTROLCOMMANDS_H
