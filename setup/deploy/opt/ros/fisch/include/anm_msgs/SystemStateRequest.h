// Generated by gencpp from file anm_msgs/SystemStateRequest.msg
// DO NOT EDIT!


#ifndef ANM_MSGS_MESSAGE_SYSTEMSTATEREQUEST_H
#define ANM_MSGS_MESSAGE_SYSTEMSTATEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <anm_msgs/SystemState.h>

namespace anm_msgs
{
template <class ContainerAllocator>
struct SystemStateRequest_
{
  typedef SystemStateRequest_<ContainerAllocator> Type;

  SystemStateRequest_()
    : header()
    , state_request(false)
    , new_state()
    , other_request(0)  {
    }
  SystemStateRequest_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , state_request(false)
    , new_state(_alloc)
    , other_request(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _state_request_type;
  _state_request_type state_request;

   typedef  ::anm_msgs::SystemState_<ContainerAllocator>  _new_state_type;
  _new_state_type new_state;

   typedef uint8_t _other_request_type;
  _other_request_type other_request;


    enum { SYS_REQ_SIMULATE_FAIL_STACK = 101u };
     enum { SYS_REQ_NONE = 127u };
 

  typedef boost::shared_ptr< ::anm_msgs::SystemStateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anm_msgs::SystemStateRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SystemStateRequest_

typedef ::anm_msgs::SystemStateRequest_<std::allocator<void> > SystemStateRequest;

typedef boost::shared_ptr< ::anm_msgs::SystemStateRequest > SystemStateRequestPtr;
typedef boost::shared_ptr< ::anm_msgs::SystemStateRequest const> SystemStateRequestConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anm_msgs::SystemStateRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anm_msgs::SystemStateRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace anm_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'anm_msgs': ['/home/waleedqk/catkin_ws/src/renesas-demo/autonomoose/rospackages/autonomoose_core/anm_msgs/msg'], 'dbw_mkz_msgs': ['/home/waleedqk/catkin_ws/deploy/install/opt/ros/fisch/share/dbw_mkz_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::anm_msgs::SystemStateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anm_msgs::SystemStateRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anm_msgs::SystemStateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anm_msgs::SystemStateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anm_msgs::SystemStateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anm_msgs::SystemStateRequest_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anm_msgs::SystemStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ec1139ecccffc08772e2a9685a56bbb";
  }

  static const char* value(const ::anm_msgs::SystemStateRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ec1139ecccffc08ULL;
  static const uint64_t static_value2 = 0x772e2a9685a56bbbULL;
};

template<class ContainerAllocator>
struct DataType< ::anm_msgs::SystemStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anm_msgs/SystemStateRequest";
  }

  static const char* value(const ::anm_msgs::SystemStateRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anm_msgs::SystemStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message indicates the requests for the system supervisor\n\
\n\
# Other requests:\n\
uint8 SYS_REQ_SIMULATE_FAIL_STACK = 101\n\
uint8 SYS_REQ_NONE = 127\n\
\n\
# Message definition\n\
Header header\n\
bool state_request          # request for a state change or something else\n\
SystemState new_state       # new state request (if state_request = true)\n\
uint8 other_request         # other request (if state request = false)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: anm_msgs/SystemState\n\
# This message contains the current state of the autonomous system\n\
# Detailed documentation can be found in google drive under the\n\
# architecture/system supervisor folder\n\
\n\
# The following constants are used to define the states\n\
uint8 ST_OFF = 0         # in manual mode - system is off\n\
uint8 ST_STANDBY = 1     # in manual mode - system is ready to go to auto mode\n\
uint8 ST_NOT_READY = 2   # in manual mode - system is not ready to go auto mode\n\
uint8 ST_PARKED = 3      # in auto mode - system is autonomously parked\n\
uint8 ST_DRIVE = 4       # in auto mode - system is autonomously driving\n\
uint8 ST_ENAVIGATION = 5 # in auto mode - system is emergency navigation\n\
uint8 ST_FINDPARKING = 6 # in auto mode - system is finding parking\n\
uint8 ST_PLATOONING  = 7 # in auto mode - system is platooning\n\
uint8 ST_EPULLOVER  = 8  # in auto mode - system is emergency pullover\n\
uint8 ST_REVERSE_PARK = 9  # in auto mode - system is reverse parking\n\
uint8 ST_PARALLEL_PARK = 10  # in auto mode - system is parallel parking\n\
\n\
# Message definition\n\
Header header\n\
uint8 state             # the state of the system\n\
uint8 envchks           # environment ready checks - 0 = fail, 1 = pass\n\
uint8 syschks           # hardware/software ready checks - 0 = fail, 1 = pass\n\
uint8 navptschks        # is there navigation points currently? 0 = no, 1 = yes\n\
\n\
";
  }

  static const char* value(const ::anm_msgs::SystemStateRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anm_msgs::SystemStateRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.state_request);
      stream.next(m.new_state);
      stream.next(m.other_request);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SystemStateRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anm_msgs::SystemStateRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anm_msgs::SystemStateRequest_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "state_request: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state_request);
    s << indent << "new_state: ";
    s << std::endl;
    Printer< ::anm_msgs::SystemState_<ContainerAllocator> >::stream(s, indent + "  ", v.new_state);
    s << indent << "other_request: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.other_request);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANM_MSGS_MESSAGE_SYSTEMSTATEREQUEST_H
