// Generated by gencpp from file anm_msgs/TrackedObjectList.msg
// DO NOT EDIT!


#ifndef ANM_MSGS_MESSAGE_TRACKEDOBJECTLIST_H
#define ANM_MSGS_MESSAGE_TRACKEDOBJECTLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <anm_msgs/TrackedObject.h>

namespace anm_msgs
{
template <class ContainerAllocator>
struct TrackedObjectList_
{
  typedef TrackedObjectList_<ContainerAllocator> Type;

  TrackedObjectList_()
    : header()
    , tracked_objects()  {
    }
  TrackedObjectList_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , tracked_objects(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::anm_msgs::TrackedObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::anm_msgs::TrackedObject_<ContainerAllocator> >::other >  _tracked_objects_type;
  _tracked_objects_type tracked_objects;




  typedef boost::shared_ptr< ::anm_msgs::TrackedObjectList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anm_msgs::TrackedObjectList_<ContainerAllocator> const> ConstPtr;

}; // struct TrackedObjectList_

typedef ::anm_msgs::TrackedObjectList_<std::allocator<void> > TrackedObjectList;

typedef boost::shared_ptr< ::anm_msgs::TrackedObjectList > TrackedObjectListPtr;
typedef boost::shared_ptr< ::anm_msgs::TrackedObjectList const> TrackedObjectListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anm_msgs::TrackedObjectList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anm_msgs::TrackedObjectList_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace anm_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'anm_msgs': ['/home/waleedqk/catkin_ws/src/renesas-demo/autonomoose/rospackages/autonomoose_core/anm_msgs/msg'], 'dbw_mkz_msgs': ['/home/waleedqk/catkin_ws/deploy/install/opt/ros/fisch/share/dbw_mkz_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::anm_msgs::TrackedObjectList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anm_msgs::TrackedObjectList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anm_msgs::TrackedObjectList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anm_msgs::TrackedObjectList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anm_msgs::TrackedObjectList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anm_msgs::TrackedObjectList_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anm_msgs::TrackedObjectList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2f252c59951ec5bfb4bcf631dd7845d1";
  }

  static const char* value(const ::anm_msgs::TrackedObjectList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2f252c59951ec5bfULL;
  static const uint64_t static_value2 = 0xb4bcf631dd7845d1ULL;
};

template<class ContainerAllocator>
struct DataType< ::anm_msgs::TrackedObjectList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anm_msgs/TrackedObjectList";
  }

  static const char* value(const ::anm_msgs::TrackedObjectList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anm_msgs::TrackedObjectList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This messages defines an array of tracked 3d bounding boxes\n\
\n\
Header header\n\
TrackedObject[] tracked_objects\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: anm_msgs/TrackedObject\n\
# This messages defines a set of tracked 3d bounding boxes\n\
#\n\
# 3D Bounding box coordinates are encoded using Kitti format (in camera frame), where (x,y,z)\n\
# represents the centroid, ry represents rotation around the y-axis in radians,\n\
# and (h,w,l) represent the height, width, length of the bounding box.\n\
#\n\
# All units but ry are in metres\n\
#\n\
# Note that the ground plane is represented using the x,z axis\n\
#\n\
# labels for classes classes = ['Car', 'Van', 'Truck', 'Pedestrian', 'Person_sitting', 'Cyclist', 'Tram', 'Misc']\n\
#\n\
#\n\
#\n\
\n\
Header header\n\
\n\
uint32 id\n\
uint16 labels\n\
\n\
# bounding box\n\
geometry_msgs/Vector3 center\n\
float32 h\n\
float32 w\n\
float32 l\n\
float32 ry\n\
float32 score\n\
\n\
# speed \n\
geometry_msgs/Vector3 velocity\n\
\n\
# status\n\
bool occluded\n\
\n\
# historied center\n\
geometry_msgs/Vector3[] historied_center\n\
\n\
# historied speed\n\
geometry_msgs/Vector3[] historied_velocity\n\
\n\
# historied occlusion status\n\
bool[] historied_occluded\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::anm_msgs::TrackedObjectList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anm_msgs::TrackedObjectList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.tracked_objects);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrackedObjectList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anm_msgs::TrackedObjectList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anm_msgs::TrackedObjectList_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "tracked_objects[]" << std::endl;
    for (size_t i = 0; i < v.tracked_objects.size(); ++i)
    {
      s << indent << "  tracked_objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::anm_msgs::TrackedObject_<ContainerAllocator> >::stream(s, indent + "    ", v.tracked_objects[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANM_MSGS_MESSAGE_TRACKEDOBJECTLIST_H
