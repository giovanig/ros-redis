// Generated by gencpp from file anm_msgs/BehaviouralAttributes.msg
// DO NOT EDIT!


#ifndef ANM_MSGS_MESSAGE_BEHAVIOURALATTRIBUTES_H
#define ANM_MSGS_MESSAGE_BEHAVIOURALATTRIBUTES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <nav_msgs/Path.h>
#include <nav_msgs/Path.h>
#include <nav_msgs/Path.h>
#include <geometry_msgs/Point.h>

namespace anm_msgs
{
template <class ContainerAllocator>
struct BehaviouralAttributes_
{
  typedef BehaviouralAttributes_<ContainerAllocator> Type;

  BehaviouralAttributes_()
    : header()
    , maneuver(0)
    , left_boundary()
    , right_boundary()
    , center_line()
    , stop_location()
    , target_velocity(0.0)
    , lead_vehicle_id(0)  {
    }
  BehaviouralAttributes_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , maneuver(0)
    , left_boundary(_alloc)
    , right_boundary(_alloc)
    , center_line(_alloc)
    , stop_location(_alloc)
    , target_velocity(0.0)
    , lead_vehicle_id(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _maneuver_type;
  _maneuver_type maneuver;

   typedef  ::nav_msgs::Path_<ContainerAllocator>  _left_boundary_type;
  _left_boundary_type left_boundary;

   typedef  ::nav_msgs::Path_<ContainerAllocator>  _right_boundary_type;
  _right_boundary_type right_boundary;

   typedef  ::nav_msgs::Path_<ContainerAllocator>  _center_line_type;
  _center_line_type center_line;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _stop_location_type;
  _stop_location_type stop_location;

   typedef double _target_velocity_type;
  _target_velocity_type target_velocity;

   typedef uint32_t _lead_vehicle_id_type;
  _lead_vehicle_id_type lead_vehicle_id;


    enum { TRACK_SPEED = 0u };
     enum { DECELERATE_TO_STOP = 1u };
     enum { STOP = 2u };
     enum { PARKED_VEHICLE_AVOID = 3u };
     enum { LEAD_VEHICLE_FOLLOW = 4u };
 

  typedef boost::shared_ptr< ::anm_msgs::BehaviouralAttributes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::anm_msgs::BehaviouralAttributes_<ContainerAllocator> const> ConstPtr;

}; // struct BehaviouralAttributes_

typedef ::anm_msgs::BehaviouralAttributes_<std::allocator<void> > BehaviouralAttributes;

typedef boost::shared_ptr< ::anm_msgs::BehaviouralAttributes > BehaviouralAttributesPtr;
typedef boost::shared_ptr< ::anm_msgs::BehaviouralAttributes const> BehaviouralAttributesConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::anm_msgs::BehaviouralAttributes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::anm_msgs::BehaviouralAttributes_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace anm_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'anm_msgs': ['/home/waleedqk/catkin_ws/src/renesas-demo/autonomoose/rospackages/autonomoose_core/anm_msgs/msg'], 'dbw_mkz_msgs': ['/home/waleedqk/catkin_ws/deploy/install/opt/ros/fisch/share/dbw_mkz_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::anm_msgs::BehaviouralAttributes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::anm_msgs::BehaviouralAttributes_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anm_msgs::BehaviouralAttributes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::anm_msgs::BehaviouralAttributes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anm_msgs::BehaviouralAttributes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::anm_msgs::BehaviouralAttributes_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::anm_msgs::BehaviouralAttributes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f25317166506ec5eda1d82c7f612bedf";
  }

  static const char* value(const ::anm_msgs::BehaviouralAttributes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf25317166506ec5eULL;
  static const uint64_t static_value2 = 0xda1d82c7f612bedfULL;
};

template<class ContainerAllocator>
struct DataType< ::anm_msgs::BehaviouralAttributes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "anm_msgs/BehaviouralAttributes";
  }

  static const char* value(const ::anm_msgs::BehaviouralAttributes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::anm_msgs::BehaviouralAttributes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message describes all necessary communication between the behavior and local planner\n\
\n\
Header header\n\
\n\
# The following constants are used to define the current maneuver being executed \n\
uint8 TRACK_SPEED = 0  			# Track the target speed as defined by target_velocity\n\
uint8 DECELERATE_TO_STOP = 1		# Decelerate to a stopping point as defined by stop_location\n\
uint8 STOP = 2  			# Stay stopped in its current location\n\
uint8 PARKED_VEHICLE_AVOID = 3		# Avoid an upcoming parked vehicle by relaxing the left_boundary constraint\n\
uint8 LEAD_VEHICLE_FOLLOW = 4      	# Follow a lead vehicle as defined by its lead_vehicle_id\n\
\n\
uint8 maneuver				# Identifies the maneuver to be executed\n\
nav_msgs/Path left_boundary		# Left lane boundary constraint\n\
nav_msgs/Path right_boundary		# Right lane boundary constraint\n\
nav_msgs/Path center_line		# Center of the lane path (global path) that should be follow\n\
geometry_msgs/Point stop_location	# A point at which the car should stop by\n\
float64 target_velocity			# The velocity which the car should attempt to maintain\n\
uint32 lead_vehicle_id			# The ID of the vehicle that should be followed\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: nav_msgs/Path\n\
#An array of poses that represents a Path for a robot to follow\n\
Header header\n\
geometry_msgs/PoseStamped[] poses\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::anm_msgs::BehaviouralAttributes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::anm_msgs::BehaviouralAttributes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.maneuver);
      stream.next(m.left_boundary);
      stream.next(m.right_boundary);
      stream.next(m.center_line);
      stream.next(m.stop_location);
      stream.next(m.target_velocity);
      stream.next(m.lead_vehicle_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BehaviouralAttributes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::anm_msgs::BehaviouralAttributes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::anm_msgs::BehaviouralAttributes_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "maneuver: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.maneuver);
    s << indent << "left_boundary: ";
    s << std::endl;
    Printer< ::nav_msgs::Path_<ContainerAllocator> >::stream(s, indent + "  ", v.left_boundary);
    s << indent << "right_boundary: ";
    s << std::endl;
    Printer< ::nav_msgs::Path_<ContainerAllocator> >::stream(s, indent + "  ", v.right_boundary);
    s << indent << "center_line: ";
    s << std::endl;
    Printer< ::nav_msgs::Path_<ContainerAllocator> >::stream(s, indent + "  ", v.center_line);
    s << indent << "stop_location: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.stop_location);
    s << indent << "target_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.target_velocity);
    s << indent << "lead_vehicle_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.lead_vehicle_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANM_MSGS_MESSAGE_BEHAVIOURALATTRIBUTES_H
