# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from anm_msgs/SystemStateRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import anm_msgs.msg
import std_msgs.msg

class SystemStateRequest(genpy.Message):
  _md5sum = "0c64e8ff4ef392d8b8f1e28448c86939"
  _type = "anm_msgs/SystemStateRequest"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# This message indicates the requests for the system supervisor

# Other requests:
uint8 SYS_REQ_SIMULATE_FAIL_STACK = 101
uint8 SYS_REQ_NONE = 127

# Message definition
Header header
bool state_request          # request for a state change or something else
SystemState new_state       # new state request (if state_request = true)
uint8 other_request         # other request (if state request = false)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: anm_msgs/SystemState
# This message contains the current state of the autonomous system
# Detailed documentation can be found in google drive under the
# architecture/system supervisor folder

# The following constants are used to define the states
uint8 ST_OFF = 0         # in manual mode - system is off
uint8 ST_STANDBY = 1     # in manual mode - system is ready to go to auto mode
uint8 ST_NOT_READY = 2   # in manual mode - system is not ready to go auto mode
uint8 ST_PARKED = 3      # in auto mode - system is autonomously parked
uint8 ST_DRIVE = 4       # in auto mode - system is autonomously driving
uint8 ST_ENAVIGATION = 5 # in auto mode - system is emergency navigation
uint8 ST_FINDPARKING = 6 # in auto mode - system is finding parking
uint8 ST_PLATOONING  = 7 # in auto mode - system is platooning
uint8 ST_EPULLOVER  = 8  # in auto mode - system is emergency pullover
uint8 ST_REVERSE_PARK = 9  # in auto mode - system is reverse parking

# Message definition
Header header
uint8 state             # the state of the system
uint8 envchks           # environment ready checks - 0 = fail, 1 = pass
uint8 syschks           # hardware/software ready checks - 0 = fail, 1 = pass
uint8 navptschks        # is there navigation points currently? 0 = no, 1 = yes

"""
  # Pseudo-constants
  SYS_REQ_SIMULATE_FAIL_STACK = 101
  SYS_REQ_NONE = 127

  __slots__ = ['header','state_request','new_state','other_request']
  _slot_types = ['std_msgs/Header','bool','anm_msgs/SystemState','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,state_request,new_state,other_request

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SystemStateRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.state_request is None:
        self.state_request = False
      if self.new_state is None:
        self.new_state = anm_msgs.msg.SystemState()
      if self.other_request is None:
        self.other_request = 0
    else:
      self.header = std_msgs.msg.Header()
      self.state_request = False
      self.new_state = anm_msgs.msg.SystemState()
      self.other_request = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.state_request, _x.new_state.header.seq, _x.new_state.header.stamp.secs, _x.new_state.header.stamp.nsecs))
      _x = self.new_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_5B().pack(_x.new_state.state, _x.new_state.envchks, _x.new_state.syschks, _x.new_state.navptschks, _x.other_request))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.new_state is None:
        self.new_state = anm_msgs.msg.SystemState()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.state_request, _x.new_state.header.seq, _x.new_state.header.stamp.secs, _x.new_state.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.state_request = bool(self.state_request)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.new_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.new_state.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.new_state.state, _x.new_state.envchks, _x.new_state.syschks, _x.new_state.navptschks, _x.other_request,) = _get_struct_5B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.state_request, _x.new_state.header.seq, _x.new_state.header.stamp.secs, _x.new_state.header.stamp.nsecs))
      _x = self.new_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_5B().pack(_x.new_state.state, _x.new_state.envchks, _x.new_state.syschks, _x.new_state.navptschks, _x.other_request))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.new_state is None:
        self.new_state = anm_msgs.msg.SystemState()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.state_request, _x.new_state.header.seq, _x.new_state.header.stamp.secs, _x.new_state.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.state_request = bool(self.state_request)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.new_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.new_state.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.new_state.state, _x.new_state.envchks, _x.new_state.syschks, _x.new_state.navptschks, _x.other_request,) = _get_struct_5B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B3I = None
def _get_struct_B3I():
    global _struct_B3I
    if _struct_B3I is None:
        _struct_B3I = struct.Struct("<B3I")
    return _struct_B3I
_struct_5B = None
def _get_struct_5B():
    global _struct_5B
    if _struct_5B is None:
        _struct_5B = struct.Struct("<5B")
    return _struct_5B
