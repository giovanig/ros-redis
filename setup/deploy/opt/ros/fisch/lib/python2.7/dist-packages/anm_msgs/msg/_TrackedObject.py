# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from anm_msgs/TrackedObject.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class TrackedObject(genpy.Message):
  _md5sum = "5ed9b60bacc1bae8a12b07a094063510"
  _type = "anm_msgs/TrackedObject"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# This messages defines a set of tracked 3d bounding boxes
#
# 3D Bounding box coordinates are encoded using Kitti format (in camera frame), where (x,y,z)
# represents the centroid, ry represents rotation around the y-axis in radians,
# and (h,w,l) represent the height, width, length of the bounding box.
#
# All units but ry are in metres
#
# Note that the ground plane is represented using the x,z axis
#
# labels for classes classes = ['Car', 'Van', 'Truck', 'Pedestrian', 'Person_sitting', 'Cyclist', 'Tram', 'Misc']
#
#
#

Header header

uint32 id
uint16 labels

# bounding box
geometry_msgs/Vector3 center
float32 h
float32 w
float32 l
float32 ry
float32 score

# speed 
geometry_msgs/Vector3 velocity

# status
bool occluded

# historied center
geometry_msgs/Vector3[] historied_center

# historied speed
geometry_msgs/Vector3[] historied_velocity

# historied occlusion status
bool[] historied_occluded




================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','id','labels','center','h','w','l','ry','score','velocity','occluded','historied_center','historied_velocity','historied_occluded']
  _slot_types = ['std_msgs/Header','uint32','uint16','geometry_msgs/Vector3','float32','float32','float32','float32','float32','geometry_msgs/Vector3','bool','geometry_msgs/Vector3[]','geometry_msgs/Vector3[]','bool[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,id,labels,center,h,w,l,ry,score,velocity,occluded,historied_center,historied_velocity,historied_occluded

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrackedObject, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id is None:
        self.id = 0
      if self.labels is None:
        self.labels = 0
      if self.center is None:
        self.center = geometry_msgs.msg.Vector3()
      if self.h is None:
        self.h = 0.
      if self.w is None:
        self.w = 0.
      if self.l is None:
        self.l = 0.
      if self.ry is None:
        self.ry = 0.
      if self.score is None:
        self.score = 0.
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.occluded is None:
        self.occluded = False
      if self.historied_center is None:
        self.historied_center = []
      if self.historied_velocity is None:
        self.historied_velocity = []
      if self.historied_occluded is None:
        self.historied_occluded = []
    else:
      self.header = std_msgs.msg.Header()
      self.id = 0
      self.labels = 0
      self.center = geometry_msgs.msg.Vector3()
      self.h = 0.
      self.w = 0.
      self.l = 0.
      self.ry = 0.
      self.score = 0.
      self.velocity = geometry_msgs.msg.Vector3()
      self.occluded = False
      self.historied_center = []
      self.historied_velocity = []
      self.historied_occluded = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_IH3d5f3dB().pack(_x.id, _x.labels, _x.center.x, _x.center.y, _x.center.z, _x.h, _x.w, _x.l, _x.ry, _x.score, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.occluded))
      length = len(self.historied_center)
      buff.write(_struct_I.pack(length))
      for val1 in self.historied_center:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.historied_velocity)
      buff.write(_struct_I.pack(length))
      for val1 in self.historied_velocity:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.historied_occluded)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.historied_occluded))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.center is None:
        self.center = geometry_msgs.msg.Vector3()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.historied_center is None:
        self.historied_center = None
      if self.historied_velocity is None:
        self.historied_velocity = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 75
      (_x.id, _x.labels, _x.center.x, _x.center.y, _x.center.z, _x.h, _x.w, _x.l, _x.ry, _x.score, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.occluded,) = _get_struct_IH3d5f3dB().unpack(str[start:end])
      self.occluded = bool(self.occluded)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.historied_center = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.historied_center.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.historied_velocity = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.historied_velocity.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.historied_occluded = struct.unpack(pattern, str[start:end])
      self.historied_occluded = map(bool, self.historied_occluded)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_IH3d5f3dB().pack(_x.id, _x.labels, _x.center.x, _x.center.y, _x.center.z, _x.h, _x.w, _x.l, _x.ry, _x.score, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.occluded))
      length = len(self.historied_center)
      buff.write(_struct_I.pack(length))
      for val1 in self.historied_center:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.historied_velocity)
      buff.write(_struct_I.pack(length))
      for val1 in self.historied_velocity:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.historied_occluded)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.historied_occluded.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.center is None:
        self.center = geometry_msgs.msg.Vector3()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.historied_center is None:
        self.historied_center = None
      if self.historied_velocity is None:
        self.historied_velocity = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 75
      (_x.id, _x.labels, _x.center.x, _x.center.y, _x.center.z, _x.h, _x.w, _x.l, _x.ry, _x.score, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.occluded,) = _get_struct_IH3d5f3dB().unpack(str[start:end])
      self.occluded = bool(self.occluded)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.historied_center = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.historied_center.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.historied_velocity = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.historied_velocity.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.historied_occluded = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.historied_occluded = map(bool, self.historied_occluded)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_IH3d5f3dB = None
def _get_struct_IH3d5f3dB():
    global _struct_IH3d5f3dB
    if _struct_IH3d5f3dB is None:
        _struct_IH3d5f3dB = struct.Struct("<IH3d5f3dB")
    return _struct_IH3d5f3dB
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
