// Generated by gencpp from file rocon_interaction_msgs/GetInteractionsRequest.msg
// DO NOT EDIT!


#ifndef ROCON_INTERACTION_MSGS_MESSAGE_GETINTERACTIONSREQUEST_H
#define ROCON_INTERACTION_MSGS_MESSAGE_GETINTERACTIONSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rocon_interaction_msgs
{
template <class ContainerAllocator>
struct GetInteractionsRequest_
{
  typedef GetInteractionsRequest_<ContainerAllocator> Type;

  GetInteractionsRequest_()
    : groups()
    , uri()
    , runtime_pairing_requirements(false)  {
    }
  GetInteractionsRequest_(const ContainerAllocator& _alloc)
    : groups(_alloc)
    , uri(_alloc)
    , runtime_pairing_requirements(false)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _groups_type;
  _groups_type groups;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _uri_type;
  _uri_type uri;

   typedef uint8_t _runtime_pairing_requirements_type;
  _runtime_pairing_requirements_type runtime_pairing_requirements;




  typedef boost::shared_ptr< ::rocon_interaction_msgs::GetInteractionsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rocon_interaction_msgs::GetInteractionsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetInteractionsRequest_

typedef ::rocon_interaction_msgs::GetInteractionsRequest_<std::allocator<void> > GetInteractionsRequest;

typedef boost::shared_ptr< ::rocon_interaction_msgs::GetInteractionsRequest > GetInteractionsRequestPtr;
typedef boost::shared_ptr< ::rocon_interaction_msgs::GetInteractionsRequest const> GetInteractionsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rocon_interaction_msgs::GetInteractionsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rocon_interaction_msgs::GetInteractionsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rocon_interaction_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'rocon_std_msgs': ['/home/giovani/catkin_ws/src/rocon_msgs/rocon_std_msgs/msg', '/home/giovani/catkin_ws/devel/share/rocon_std_msgs/msg'], 'rocon_service_pair_msgs': ['/home/giovani/catkin_ws/src/rocon_msgs/rocon_service_pair_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'rocon_interaction_msgs': ['/home/giovani/catkin_ws/src/rocon_msgs/rocon_interaction_msgs/msg'], 'uuid_msgs': ['/opt/ros/kinetic/share/uuid_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rocon_interaction_msgs::GetInteractionsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rocon_interaction_msgs::GetInteractionsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rocon_interaction_msgs::GetInteractionsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rocon_interaction_msgs::GetInteractionsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rocon_interaction_msgs::GetInteractionsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rocon_interaction_msgs::GetInteractionsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rocon_interaction_msgs::GetInteractionsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c6009efeb3aefbb011e98b70f91471a0";
  }

  static const char* value(const ::rocon_interaction_msgs::GetInteractionsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc6009efeb3aefbb0ULL;
  static const uint64_t static_value2 = 0x11e98b70f91471a0ULL;
};

template<class ContainerAllocator>
struct DataType< ::rocon_interaction_msgs::GetInteractionsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rocon_interaction_msgs/GetInteractionsRequest";
  }

  static const char* value(const ::rocon_interaction_msgs::GetInteractionsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rocon_interaction_msgs::GetInteractionsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
\n\
\n\
\n\
\n\
string[] groups\n\
\n\
\n\
\n\
string uri\n\
\n\
\n\
\n\
bool runtime_pairing_requirements\n\
";
  }

  static const char* value(const ::rocon_interaction_msgs::GetInteractionsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rocon_interaction_msgs::GetInteractionsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.groups);
      stream.next(m.uri);
      stream.next(m.runtime_pairing_requirements);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetInteractionsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rocon_interaction_msgs::GetInteractionsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rocon_interaction_msgs::GetInteractionsRequest_<ContainerAllocator>& v)
  {
    s << indent << "groups[]" << std::endl;
    for (size_t i = 0; i < v.groups.size(); ++i)
    {
      s << indent << "  groups[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.groups[i]);
    }
    s << indent << "uri: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.uri);
    s << indent << "runtime_pairing_requirements: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.runtime_pairing_requirements);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROCON_INTERACTION_MSGS_MESSAGE_GETINTERACTIONSREQUEST_H
