// Generated by gencpp from file rocon_interaction_msgs/Pairing.msg
// DO NOT EDIT!


#ifndef ROCON_INTERACTION_MSGS_MESSAGE_PAIRING_H
#define ROCON_INTERACTION_MSGS_MESSAGE_PAIRING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rocon_std_msgs/Icon.h>
#include <rocon_std_msgs/Remapping.h>
#include <rocon_std_msgs/KeyValue.h>

namespace rocon_interaction_msgs
{
template <class ContainerAllocator>
struct Pairing_
{
  typedef Pairing_<ContainerAllocator> Type;

  Pairing_()
    : name()
    , group()
    , rapp()
    , description()
    , requires_interaction()
    , icon()
    , remappings()
    , parameters()  {
    }
  Pairing_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , group(_alloc)
    , rapp(_alloc)
    , description(_alloc)
    , requires_interaction(_alloc)
    , icon(_alloc)
    , remappings(_alloc)
    , parameters(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _group_type;
  _group_type group;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rapp_type;
  _rapp_type rapp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _description_type;
  _description_type description;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _requires_interaction_type;
  _requires_interaction_type requires_interaction;

   typedef  ::rocon_std_msgs::Icon_<ContainerAllocator>  _icon_type;
  _icon_type icon;

   typedef std::vector< ::rocon_std_msgs::Remapping_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rocon_std_msgs::Remapping_<ContainerAllocator> >::other >  _remappings_type;
  _remappings_type remappings;

   typedef std::vector< ::rocon_std_msgs::KeyValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rocon_std_msgs::KeyValue_<ContainerAllocator> >::other >  _parameters_type;
  _parameters_type parameters;




  typedef boost::shared_ptr< ::rocon_interaction_msgs::Pairing_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rocon_interaction_msgs::Pairing_<ContainerAllocator> const> ConstPtr;

}; // struct Pairing_

typedef ::rocon_interaction_msgs::Pairing_<std::allocator<void> > Pairing;

typedef boost::shared_ptr< ::rocon_interaction_msgs::Pairing > PairingPtr;
typedef boost::shared_ptr< ::rocon_interaction_msgs::Pairing const> PairingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rocon_interaction_msgs::Pairing_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rocon_interaction_msgs::Pairing_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rocon_interaction_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'rocon_std_msgs': ['/home/giovani/catkin_ws/src/rocon_msgs/rocon_std_msgs/msg', '/home/giovani/catkin_ws/devel/share/rocon_std_msgs/msg'], 'rocon_service_pair_msgs': ['/home/giovani/catkin_ws/src/rocon_msgs/rocon_service_pair_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'rocon_interaction_msgs': ['/home/giovani/catkin_ws/src/rocon_msgs/rocon_interaction_msgs/msg'], 'uuid_msgs': ['/opt/ros/kinetic/share/uuid_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rocon_interaction_msgs::Pairing_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rocon_interaction_msgs::Pairing_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rocon_interaction_msgs::Pairing_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rocon_interaction_msgs::Pairing_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rocon_interaction_msgs::Pairing_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rocon_interaction_msgs::Pairing_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rocon_interaction_msgs::Pairing_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1dae0009f23a860ae843f68089b76ed0";
  }

  static const char* value(const ::rocon_interaction_msgs::Pairing_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1dae0009f23a860aULL;
  static const uint64_t static_value2 = 0xe843f68089b76ed0ULL;
};

template<class ContainerAllocator>
struct DataType< ::rocon_interaction_msgs::Pairing_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rocon_interaction_msgs/Pairing";
  }

  static const char* value(const ::rocon_interaction_msgs::Pairing_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rocon_interaction_msgs::Pairing_<ContainerAllocator> >
{
  static const char* value()
  {
    return "###############################################################\n\
# Pairing rapp specification\n\
###############################################################\n\
\n\
# Unique name that represents this pairing. Note that you can\n\
# have multiple configurations of a single rapp, so the rapp\n\
# name alone is not enough to uniquely identify the pairing\n\
string name\n\
\n\
# Group to which this pairing belongs\n\
string group\n\
\n\
# ros resource name of the rapp, e.g. rocon_apps/talker\n\
string rapp\n\
\n\
###############################################################\n\
# Customising the rapp launch instance\n\
###############################################################\n\
\n\
# Can load the default rapp description, but sometimes useful to\n\
# override it to provide more human friendly information.\n\
string description\n\
\n\
# Whether or not this rapp should bringup/teardown an interaction\n\
# with the launching of this rapp. If empty, no interaction is\n\
# required, if non-empty, look for the specified interaction.\n\
string requires_interaction\n\
\n\
# Again, can load the default rapp icon, but may want to override it.\n\
rocon_std_msgs/Icon icon\n\
\n\
rocon_std_msgs/Remapping[] remappings\n\
\n\
# Key value pairs representing rapp parameters\n\
rocon_std_msgs/KeyValue[] parameters\n\
\n\
================================================================================\n\
MSG: rocon_std_msgs/Icon\n\
# Used to idenfity the original package/filename resource this icon was/is to be loaded from\n\
# This typically doesn't have to be set, but can be very useful when loading icons from yaml definitions.\n\
string resource_name\n\
\n\
# Image data format.  \"jpeg\" or \"png\"\n\
string format\n\
\n\
# Image data.\n\
uint8[] data\n\
================================================================================\n\
MSG: rocon_std_msgs/Remapping\n\
# Describes your typical ros remapping\n\
\n\
string remap_from\n\
string remap_to\n\
\n\
================================================================================\n\
MSG: rocon_std_msgs/KeyValue\n\
string key\n\
string value\n\
";
  }

  static const char* value(const ::rocon_interaction_msgs::Pairing_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rocon_interaction_msgs::Pairing_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.group);
      stream.next(m.rapp);
      stream.next(m.description);
      stream.next(m.requires_interaction);
      stream.next(m.icon);
      stream.next(m.remappings);
      stream.next(m.parameters);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pairing_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rocon_interaction_msgs::Pairing_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rocon_interaction_msgs::Pairing_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "group: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.group);
    s << indent << "rapp: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rapp);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.description);
    s << indent << "requires_interaction: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.requires_interaction);
    s << indent << "icon: ";
    s << std::endl;
    Printer< ::rocon_std_msgs::Icon_<ContainerAllocator> >::stream(s, indent + "  ", v.icon);
    s << indent << "remappings[]" << std::endl;
    for (size_t i = 0; i < v.remappings.size(); ++i)
    {
      s << indent << "  remappings[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rocon_std_msgs::Remapping_<ContainerAllocator> >::stream(s, indent + "    ", v.remappings[i]);
    }
    s << indent << "parameters[]" << std::endl;
    for (size_t i = 0; i < v.parameters.size(); ++i)
    {
      s << indent << "  parameters[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rocon_std_msgs::KeyValue_<ContainerAllocator> >::stream(s, indent + "    ", v.parameters[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROCON_INTERACTION_MSGS_MESSAGE_PAIRING_H
