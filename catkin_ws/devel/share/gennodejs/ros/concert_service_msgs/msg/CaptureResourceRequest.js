// Auto-generated. Do not edit!

// (in-package concert_service_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class CaptureResourceRequest {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.rocon_uri = null;
      this.release = null;
    }
    else {
      if (initObj.hasOwnProperty('rocon_uri')) {
        this.rocon_uri = initObj.rocon_uri
      }
      else {
        this.rocon_uri = '';
      }
      if (initObj.hasOwnProperty('release')) {
        this.release = initObj.release
      }
      else {
        this.release = false;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type CaptureResourceRequest
    // Serialize message field [rocon_uri]
    bufferOffset = _serializer.string(obj.rocon_uri, buffer, bufferOffset);
    // Serialize message field [release]
    bufferOffset = _serializer.bool(obj.release, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type CaptureResourceRequest
    let len;
    let data = new CaptureResourceRequest(null);
    // Deserialize message field [rocon_uri]
    data.rocon_uri = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [release]
    data.release = _deserializer.bool(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += object.rocon_uri.length;
    return length + 5;
  }

  static datatype() {
    // Returns string type for a message object
    return 'concert_service_msgs/CaptureResourceRequest';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '9ef24df11d8c425fa509296ab551e5d4';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM A SERVICE PAIR DEFINITION ======
    
    # Used by turtle_concert/teleop service to handle requests to capture
    # teleopable robots.
    
    # Usually the rocon uri provided to the remocon in the list of available
    # teleopable robots.
    string rocon_uri
    # Capture or release the robot - pythonic default is False (i.e. capture) 
    bool release
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new CaptureResourceRequest(null);
    if (msg.rocon_uri !== undefined) {
      resolved.rocon_uri = msg.rocon_uri;
    }
    else {
      resolved.rocon_uri = ''
    }

    if (msg.release !== undefined) {
      resolved.release = msg.release;
    }
    else {
      resolved.release = false
    }

    return resolved;
    }
};

module.exports = CaptureResourceRequest;
