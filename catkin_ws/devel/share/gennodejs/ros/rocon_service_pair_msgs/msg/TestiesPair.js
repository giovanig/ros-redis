// Auto-generated. Do not edit!

// (in-package rocon_service_pair_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let TestiesPairRequest = require('./TestiesPairRequest.js');
let TestiesPairResponse = require('./TestiesPairResponse.js');

//-----------------------------------------------------------

class TestiesPair {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.pair_request = null;
      this.pair_response = null;
    }
    else {
      if (initObj.hasOwnProperty('pair_request')) {
        this.pair_request = initObj.pair_request
      }
      else {
        this.pair_request = new TestiesPairRequest();
      }
      if (initObj.hasOwnProperty('pair_response')) {
        this.pair_response = initObj.pair_response
      }
      else {
        this.pair_response = new TestiesPairResponse();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type TestiesPair
    // Serialize message field [pair_request]
    bufferOffset = TestiesPairRequest.serialize(obj.pair_request, buffer, bufferOffset);
    // Serialize message field [pair_response]
    bufferOffset = TestiesPairResponse.serialize(obj.pair_response, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type TestiesPair
    let len;
    let data = new TestiesPair(null);
    // Deserialize message field [pair_request]
    data.pair_request = TestiesPairRequest.deserialize(buffer, bufferOffset);
    // Deserialize message field [pair_response]
    data.pair_response = TestiesPairResponse.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += TestiesPairRequest.getMessageSize(object.pair_request);
    length += TestiesPairResponse.getMessageSize(object.pair_response);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'rocon_service_pair_msgs/TestiesPair';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '7b5cb9b4ccdb74840ce04ea92d2a141d';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    
    TestiesPairRequest pair_request
    TestiesPairResponse pair_response
    
    ================================================================================
    MSG: rocon_service_pair_msgs/TestiesPairRequest
    uuid_msgs/UniqueID id
    TestiesRequest request
    
    ================================================================================
    MSG: uuid_msgs/UniqueID
    # A universally unique identifier (UUID).
    #
    #  http://en.wikipedia.org/wiki/Universally_unique_identifier
    #  http://tools.ietf.org/html/rfc4122.html
    
    uint8[16] uuid
    
    ================================================================================
    MSG: rocon_service_pair_msgs/TestiesRequest
    string data
    
    ================================================================================
    MSG: rocon_service_pair_msgs/TestiesPairResponse
    uuid_msgs/UniqueID id
    TestiesResponse response
    
    ================================================================================
    MSG: rocon_service_pair_msgs/TestiesResponse
    # ====== DO NOT MODIFY! AUTOGENERATED FROM A SERVICE PAIR DEFINITION ======
    uuid_msgs/UniqueID id
    string data
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new TestiesPair(null);
    if (msg.pair_request !== undefined) {
      resolved.pair_request = TestiesPairRequest.Resolve(msg.pair_request)
    }
    else {
      resolved.pair_request = new TestiesPairRequest()
    }

    if (msg.pair_response !== undefined) {
      resolved.pair_response = TestiesPairResponse.Resolve(msg.pair_response)
    }
    else {
      resolved.pair_response = new TestiesPairResponse()
    }

    return resolved;
    }
};

module.exports = TestiesPair;
